name: Sync from Google Drive

on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/30 * * * *" # chỉnh theo nhu cầu

concurrency:
  group: drive-sync
  cancel-in-progress: false

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # cần để push

    env:
      SRC_BRANCH: main               # workflow sống trên main
      BRANCH: develop               # nhánh đích để push
      DRIVE_FOLDER_MODE: latest     # latest | all
      STRIP_TOP_DIR: "0"            # "1" để bỏ thư mục gốc trong archive

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.SRC_BRANCH }}
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install unzip & p7zip
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip p7zip-full

      # ✅ Tạo package.json nếu thiếu + cài googleapis để script có module
      - name: Prepare dependencies
        run: |
          test -f package.json || npm init -y
          npm install googleapis

      # ❗️Ghi SA credentials ra thư mục tạm, KHÔNG vào repo
      - name: Prepare Service Account credentials (temp path)
        id: sa
        run: |
          echo '${{ secrets.GDRIVE_CREDENTIALS_JSON }}' > "$RUNNER_TEMP/creds.json"
          echo "creds=$RUNNER_TEMP/creds.json" >> "$GITHUB_OUTPUT"

      # Chạy script trong repo: scripts/drive_sync.mjs (bro đã có file này)
      - name: Run Drive sync
        env:
          GDRIVE_CREDENTIALS_PATH: ${{ steps.sa.outputs.creds }}
          GDRIVE_FILE_ID: ${{ secrets.GDRIVE_FILE_ID }}       # dùng 1 trong 2
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}   # hoặc folder
          REPO_TARGET_DIR: ${{ secrets.REPO_TARGET_DIR }}     # vd: "src/"
          DRIVE_FOLDER_MODE: ${{ env.DRIVE_FOLDER_MODE }}
          STRIP_TOP_DIR: ${{ env.STRIP_TOP_DIR }}
        run: node scripts/drive_sync.mjs

      # Bỏ file nhạy cảm nếu lỡ có trong archive trước khi commit
      - name: Sanitize sensitive files before commit
        run: |
          set -e
          patterns='
          creds.json
          *.pem
          *id_rsa*
          *id_ed25519*
          *.key
          .env
          .env.*
          *keystore*
          *credentials.json
          '
          for p in $patterns; do
            git rm -rf --cached --ignore-unmatch $p 2>/dev/null || true
            rm -rf $p 2>/dev/null || true
          done

      - name: Commit & pull-then-push to develop (create if missing)
        env:
          BRANCH: ${{ env.BRANCH }}
          SRC_BRANCH: ${{ env.SRC_BRANCH }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail

          git config --global --add safe.directory "$PWD"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Dùng remote có token để tránh 403
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"

          git fetch origin --prune

          # Nếu develop đã có trên remote → reset local về remote cho sạch lịch sử
          if git ls-remote --exit-code --heads origin "${BRANCH}" >/dev/null 2>&1; then
            git checkout "${BRANCH}" || git checkout -b "${BRANCH}"
            git reset --hard "origin/${BRANCH}"
          else
            # Chưa có develop thì tạo từ SRC_BRANCH (main)
            git checkout -B "${BRANCH}" "${SRC_BRANCH}"
          fi

          # Pull trước khi push (rebase để tránh merge commit rác)
          git pull --rebase origin "${BRANCH}" || true

          # Stage & commit nếu có thay đổi
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "Auto sync from Google Drive archive(s) [sanitized]"

          # Push (lần đầu set upstream) + retry chống race
          n=0
          until [ $n -ge 3 ]; do
            if git push -u origin "${BRANCH}"; then
              echo "Push OK"
              exit 0
            fi
            echo "Push failed, pulling & retrying..."
            git pull --rebase origin "${BRANCH}" || true
            n=$((n+1)); sleep 2
          done

          echo "Push failed after retries" >&2
          exit 1
